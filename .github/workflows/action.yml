name: CD with Gradle

# 언제 이 파일의 내용이 실행될 것인지 정의합니다..
# 여기서는 main 브랜치에 코드가 push 되거나 pull_request되었을 때 실행할 것을 말하고 있습니다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용합니다.
permissions:
  contents: read

# 실제 실행될 내용들을 정의합니다.
jobs:
  build:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행

    steps:
      # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
      - uses: actions/checkout@v3

      # open jdk 11 버전 환경을 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: "adopt"

      # application-secret.yml생성
      - name: make application-secret.yml
        if: github.ref == 'refs/heads/main'
        run: |
          # spring의 resources 경로로 이동
          cd ./src/main/resources
          
          # 해당 디렉토리에 application-secret.yml 파일이 이미 존재하는지 확인하고, 없으면 생성합니다.
          if [ ! -f application-secret.yml ]; then
          touch ./application-secret.yml
          fi
          
          # GitHub Actions에서 설정한 값을 base64 디코딩하여 application-secret.yml 파일에 쓰기
          echo "copy properties"
          echo "${{ secrets.APPLICATION_SECRET }}" | base64 --decode > ./application-secret.yml
        shell: bash

      # application.yml생성
      - name: make application.yml
        if: github.ref == 'refs/heads/main'
        run: |
          # spring의 resources 경로로 이동
          cd ./src/main/resources
                
          # 해당 디렉토리에 application.yml 파일이 이미 존재하는지 확인하고, 없으면 생성합니다.
          if [ ! -f application.yml ]; then
          touch ./application.yml
          fi
                
          # GitHub Actions에서 설정한 값을 base64 디코딩하여 application.yml 파일에 쓰기
          echo "copy properties"
          echo "${{ secrets.APPLICATION }}" | base64 --decode > ./application.yml
        shell: bash

#      # create application.yml
#      - name: make application-aws.yml
#        if: github.ref == 'refs/heads/main'
#        run: |
#          # spring의 resources 경로로 이동
#          cd ./src/main/resources
#
#          # 해당 디렉토리에 application.yml 파일이 이미 존재하는지 확인하고, 없으면 생성합니다.
#          if [ ! -f application.yml ]; then
#          touch ./application.yml
#          fi
#
#          # GitHub Actions에서 설정한 값을 base64 디코딩하여 application.yml 파일에 쓰기
#          echo "copy properties"
#          echo "${{ secrets.MAKE_APPLICATION }}" | base64 --decode > ./application.yml
#        shell: bash

      # gradle을 통해 소스를 빌드.
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
      # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/directors-dev 가 위에서 만든 도커 repository 입니다.
#      - name: Docker build & push to docker repo
#        run: |
#          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/spring-image:latest .
#          docker push ${{ secrets.DOCKER_REPO }}/spring-image

      - name: Login to Docker Hub
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/spring-image .
      - name: Push Docker
        run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-image:latest

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3.2.0
#
#      - name: Build and push
#        uses: docker/build-push-action@v5.3.0
#        with:
#          context: .
#          file: Dockerfile
#          push: true
#          tags: ${{ secrets.DOCKER_USERNAME }}/spring-image:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.EC2_IP }}/api/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.EC2_IP }}/api/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM = green ]; then
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi

      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.EC2_IP }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/spring-image:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d

      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.EC2_IP }}:${{env.STOPPED_PORT}}/api/env
          max-attempts: 3
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.EC2_IP }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.EC2_IP }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            sudo docker stop ${{env.CURRENT_UPSTREAM}}
            sudo docker rm ${{env.CURRENT_UPSTREAM}}


#      - name: Pull and restart Docker Container
#        uses: appleboy/ssh-action@master
#        with:
#          key: ${{ secrets.EC2_KEY }}
#          host: ${{ secrets.EC2_IP }}
#          username: ubuntu
#          script:
#            docker container stop spring-image;
#            docker image rm ${{ secrets.DOCKER_USERNAME }}/spring-image;
#            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-image:latest;
#            docker run -d --rm --name spring-image -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/spring-image:latest;
#







#      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
#      # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다.
#      # 실행 시, docker-compose를 사용합니다.
#      - name: Deploy to server
#        uses: appleboy/ssh-action@master
#        id: deploy
#        with:
#          host: ${{ secrets.EC2_IP }}
#          username: sunwoo
#          key: ${{ secrets.EC2_KEY }}
#          envs: GITHUB_SHA
#          script: |
#            sudo docker rm -f $(docker ps -qa)
#            sudo docker pull ${{ secrets.DOCKER_REPO }}/directors-dev
#            docker-compose up -d
#            docker image prune -f